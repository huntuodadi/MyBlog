(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{220:function(s,a,n){"use strict";n.r(a);var e=n(0),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"react创建组件的三种方式及其区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react创建组件的三种方式及其区别","aria-hidden":"true"}},[s._v("#")]),s._v(" React创建组件的三种方式及其区别")]),s._v(" "),n("p",[s._v("React推出后，出于不同的原因先后出现三种定义react组件的方式，殊途同归；具体的三种方式：\n")]),s._v(" "),n("blockquote",[n("p",[s._v("1.函数式定义的无状态组件")])]),s._v(" "),n("blockquote",[n("p",[s._v("2.es5原生方式React.createClass定义的组件")])]),s._v(" "),n("blockquote",[n("p",[s._v("3.es6形式的extends React.Component定义的组件")])]),s._v(" "),n("p",[s._v("虽然有三种方式可以定义react的组件，那么这三种定义组件方式有什么不同呢？或者说为什么会出现对应的定义方式呢？下面就简单介绍一下。")]),s._v(" "),n("h2",{attrs:{id:"无状态函数式组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#无状态函数式组件","aria-hidden":"true"}},[s._v("#")]),s._v(" 无状态函数式组件")]),s._v(" "),n("p",[s._v("创建无状态函数式组件形式是从React 0.14版本开始出现的。它是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到要state状态的操作。具体的无状态函数式组件，其官方指出：")]),s._v(" "),n("blockquote",[n("p",[s._v("在大部分React代码中，大多数组件被写成无状态的组件，通过简单组合可以构建成其他的组件等；这种通过多个简单然后合并成一个大应用的设计模式被提倡。")])]),s._v(" "),n("p",[s._v("无状态函数式组件形式上表现为一个只带有一个render方法的组件类，通过函数形式或者ES6 arrow function的形式在创建，并且该组件是无state状态的。具体的创建形式如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function HelloComponent(props, /* context */) {\n  return <div>Hello {props.name}</div>\n}\nReactDOM.render(<HelloComponent name="Sebastian" />, mountNode)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("blockquote",[n("p",[s._v("无状态组件的创建形式使代码的可读性更好，并且减少了大量冗余的代码，精简至只有一个render方法，大大的增强了编写一个组件的便利，除此之外无状态组件还有以下几个显著的特点：")])]),s._v(" "),n("h3",{attrs:{id:"组件不会被实例化，整体渲染性能得到提升"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件不会被实例化，整体渲染性能得到提升","aria-hidden":"true"}},[s._v("#")]),s._v(" 组件不会被实例化，整体渲染性能得到提升")]),s._v(" "),n("p",[s._v("因为组件被精简成一个render方法的函数来实现的，由于是无状态组件，所以无状态组件就不会在有组件实例化的过程，无实例化过程也就不需要分配多余的内存，从而性能得到一定的提升。")]),s._v(" "),n("h3",{attrs:{id:"组件不能访问this对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件不能访问this对象","aria-hidden":"true"}},[s._v("#")]),s._v(" 组件不能访问this对象")]),s._v(" "),n("p",[s._v("无状态组件由于没有实例化过程，所以无法访问组件this中的对象，例如：this.ref、this.state等均不能访问。若想访问就不能使用这种形式来创建组件")]),s._v(" "),n("h3",{attrs:{id:"组件无法访问生命周期的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件无法访问生命周期的方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 组件无法访问生命周期的方法")]),s._v(" "),n("p",[s._v("因为无状态组件是不需要组件生命周期管理和状态管理，所以底层实现这种形式的组件时是不会实现组件的生命周期方法。所以无状态组件是不能参与组件的各个生命周期管理的。无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用.\n无状态组件被鼓励在大型项目中尽可能以简单的写法来分割原本庞大的组件，未来React也会这种面向无状态组件在譬如无意义的检查和内存分配领域进行一系列优化，所以只要有可能，尽量使用无状态组件。")]),s._v(" "),n("h2",{attrs:{id:"react-createclass"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-createclass","aria-hidden":"true"}},[s._v("#")]),s._v(" React.createClass")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("`React.createClass`是react刚开始推荐的创建组件的方式，这是ES5的原生的JavaScript来实现的React组件，其形式如下：\nvar InputControlES5 = React.createClass({\n    propTypes: {//定义传入props中的属性各种类型\n        initialValue: React.PropTypes.string\n    },\n    defaultProps: { //组件默认的props对象\n        initialValue: ''\n    },\n    // 设置 initial state\n    getInitialState: function() {//组件相关的状态对象\n        return {\n            text: this.props.initialValue || 'placeholder'\n        };\n    },\n    handleChange: function(event) {\n        this.setState({ //this represents react component instance\n            text: event.target.value\n        });\n    },\n    render: function() {\n        return (\n            <div>\n                Type something:\n                <input onChange={this.handleChange} value={this.state.text} />\n            </div>\n        );\n    }\n});\nInputControlES6.propTypes = {\n    initialValue: React.PropTypes.string\n};\nInputControlES6.defaultProps = {\n    initialValue: ''\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("p",[s._v("与无状态组件相比，React.createClass和后面要描述的React.Component都是创建有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法。但是随着React的发展，React.createClass形式自身的问题暴露出来：")]),s._v(" "),n("p",[s._v("React.createClass会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性。\nReact.createClass的mixins不够自然、直观；React.Component形式非常适合高阶组件（Higher Order Components–HOC）,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。HOC可以参考无状态组件(Stateless Component) 与高阶组件。")]),s._v(" "),n("h3",{attrs:{id:"react-component"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-component","aria-hidden":"true"}},[s._v("#")]),s._v(" React.Component")]),s._v(" "),n("p",[s._v("React.Component是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；相对于 React.createClass可以更好实现代码复用。将上面React.createClass的形式改为React.Component形式如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class InputControlES6 extends React.Component {\n    constructor(props) {\n        super(props);\n        // 设置 initial state\n        this.state = {\n            text: props.initialValue || 'placeholder'\n        };\n        // ES6 类中函数必须手动绑定\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange(event) {\n        this.setState({\n            text: event.target.value\n        });\n    }\n    render() {\n        return (\n            <div>\n                Type something:\n                <input onChange={this.handleChange}\n               value={this.state.text} />\n            </div>\n        );\n    }\n}\nInputControlES6.propTypes = {\n    initialValue: React.PropTypes.string\n};\nInputControlES6.defaultProps = {\n    initialValue: ''\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])]),n("h3",{attrs:{id:"react-createclass与react-component区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-createclass与react-component区别","aria-hidden":"true"}},[s._v("#")]),s._v(" React.createClass与React.Component区别")]),s._v(" "),n("blockquote",[n("p",[s._v("根据上面展示代码中二者定义组件的语法格式不同之外，二者还有很多重要的区别，下面就描述一下二者的主要区别。")])]),s._v(" "),n("h4",{attrs:{id:"函数this自绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数this自绑定","aria-hidden":"true"}},[s._v("#")]),s._v(" 函数this自绑定")]),s._v(" "),n("p",[s._v("React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const Contacts = React.createClass({\n  handleClick() {\n    console.log(this); // React Component instance\n  },\n  render() {\n    return (\n      <div onClick={this.handleClick}></div>\n    );\n  }\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Contacts extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  handleClick() {\n    console.log(this); // null\n  }\n  render() {\n    return (\n      <div onClick={this.handleClick}></div>\n    );\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("当然，React.Component有三种手动绑定方法：可以在构造函数中完成绑定，也可以在调用时使用method.bind(this)来完成绑定，还可以使用arrow function来绑定。拿上例的handleClick函数来说，其绑定可以有：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  constructor(props) {\n     super(props);\n     this.handleClick = this.handleClick.bind(this); //构造函数中绑定\n}\n  <div onClick={this.handleClick.bind(this)}></div> //使用bind来绑定\n  <div onClick={()=>this.handleClick()}></div> //使用arrow function来绑定\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h4",{attrs:{id:"组件属性类型proptypes及其默认props属性defaultprops配置不同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件属性类型proptypes及其默认props属性defaultprops配置不同","aria-hidden":"true"}},[s._v("#")]),s._v(" 组件属性类型propTypes及其默认props属性defaultProps配置不同")]),s._v(" "),n("blockquote",[n("p",[s._v("React.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const TodoItem = React.createClass({\n    propTypes: { // as an object\n        name: React.PropTypes.string\n    },\n    getDefaultProps(){   // return a object\n        return {\n            name: ''\n        }\n    }\n    render(){\n        return <div></div>\n    }\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("React.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。对应上面配置如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class TodoItem extends React.Component {\n    static propTypes = {//类的静态属性\n        name: React.PropTypes.string\n    };\n    static defaultProps = {//类的静态属性\n        name: ''\n    };\n    ...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h4",{attrs:{id:"组件初始状态state的配置不同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件初始状态state的配置不同","aria-hidden":"true"}},[s._v("#")]),s._v(" 组件初始状态state的配置不同")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var SomeMixin = {\n  doSomething() {\n  }\n};\nconst Contacts = React.createClass({\n  mixins: [SomeMixin],\n  handleClick() {\n    this.doSomething(); // use mixin\n  },\n  render() {\n    return (\n      <div onClick={this.handleClick}></div>\n    );\n  }\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("但是遗憾的是React.Component这种形式并不支持Mixins，至今React团队还没有给出一个该形式下的官方解决方案；但是React开发者社区提供一个全新的方式来取代Mixins,那就是Higher-Order Components")]),s._v(" "),n("h3",{attrs:{id:"如何选择哪种方式创建组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何选择哪种方式创建组件","aria-hidden":"true"}},[s._v("#")]),s._v(" 如何选择哪种方式创建组件")]),s._v(" "),n("p",[s._v("由于React团队已经声明React.createClass最终会被React.Component的类形式所取代。但是在找到Mixins替代方案之前是不会废弃掉React.createClass形式。所以：")]),s._v(" "),n("blockquote",[n("p",[s._v("能用React.Component创建的组件的就尽量不用React.createClass形式创建组件")])]),s._v(" "),n("p",[s._v("除此之外，创建组件的形式选择还应该根据下面来决定：")]),s._v(" "),n("blockquote",[n("p",[s._v("1、只要有可能，尽量使用无状态组件创建形式。")])]),s._v(" "),n("blockquote",[n("p",[s._v("2、否则（如需要state、生命周期方法等），使用"),n("code",[s._v("React.Component")]),s._v("这种es6形式创建组件")])]),s._v(" "),n("h3",{attrs:{id:"补充一点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#补充一点","aria-hidden":"true"}},[s._v("#")]),s._v(" 补充一点")]),s._v(" "),n("p",[s._v("无状态组件内部其实是可以使用ref功能的，虽然不能通过this.refs访问到，但是可以通过将ref内容保存到无状态组件内部的一个本地变量中获取到。\n例如下面这段代码可以使用ref来获取组件挂载到dom中后所指向的dom元素：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function TestComp(props){\n    let ref;\n    return (<div>\n        <div ref={(node) => ref = node}>\n            ...\n        </div>\n    </div>)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"参考文献"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文献","aria-hidden":"true"}},[s._v("#")]),s._v(" 参考文献")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://www.w3cplus.com/react/react-es5-createclass-vs-es6-classes.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("React 组件构造方法: ES5 (createClass) 还是 ES6 (class)？"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://www.peachis.me/react-createclass-versus-extends-react-component/",target:"_blank",rel:"noopener noreferrer"}},[s._v("React.createClass 对比 extends React.Component"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://segmentfault.com/a/1190000006180667",target:"_blank",rel:"noopener noreferrer"}},[s._v("React中函数式声明组件"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://www.w3ctech.com/topic/1599",target:"_blank",rel:"noopener noreferrer"}},[s._v("React Mixin 的前世今生"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=t.exports}}]);