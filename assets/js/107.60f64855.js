(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{380:function(t,a,e){"use strict";e.r(a);var i=e(0),r=Object(i.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"前端必懂的http缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端必懂的http缓存机制","aria-hidden":"true"}},[t._v("#")]),t._v(" 前端必懂的HTTP缓存机制")]),t._v(" "),e("p",[e("a",{attrs:{name:"0560882d"}})]),t._v(" "),e("h1",{attrs:{id:"http缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http缓存机制","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTP缓存机制")]),t._v(" "),e("p",[t._v("Http 缓存机制作为 web 性能优化的重要手段，对从事 Web 开发的小伙伴们来说是必须要掌握的知识，要想彻底搞懂HTTP缓存机制"),e("br"),t._v("那就需从HTTP缓存基本概念说起。")]),t._v(" "),e("p",[e("a",{attrs:{name:"c89e83b0"}})]),t._v(" "),e("h2",{attrs:{id:"http缓存基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http缓存基本概念","aria-hidden":"true"}},[t._v("#")]),t._v(" Http缓存基本概念")]),t._v(" "),e("p",[e("a",{attrs:{name:"c9bf556a"}})]),t._v(" "),e("h3",{attrs:{id:"http报文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http报文","aria-hidden":"true"}},[t._v("#")]),t._v(" Http报文")]),t._v(" "),e("p",[t._v("在浏览器和服务器进行Http通信时发送的数据即为Http报文，其中分为两部分："),e("br"),t._v("1.header - 报文的首部或头部，其中保存着各类请求的属性字段，关于Http的缓存相关规则信息均保存在header中"),e("br"),t._v("2.body - 请求体部分，Http请求真正传输的主体部分")]),t._v(" "),e("p",[e("a",{attrs:{name:"30a0b120"}})]),t._v(" "),e("h3",{attrs:{id:"与缓存相关的首部字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#与缓存相关的首部字段","aria-hidden":"true"}},[t._v("#")]),t._v(" 与缓存相关的首部字段")]),t._v(" "),e("p",[t._v("1.通用首部字段"),e("br"),e("img",{attrs:{src:"https://user-images.githubusercontent.com/21194931/56130129-a8ab5c80-5fb6-11e9-8294-2da41892ccdf.png#align=left&display=inline&height=82&originHeight=82&originWidth=649&status=uploading&width=649",alt:""}})]),t._v(" "),e("p",[t._v("2.请求首部字段"),e("br"),e("img",{attrs:{src:"https://user-images.githubusercontent.com/21194931/56130136-ad701080-5fb6-11e9-8308-33dd69394269.png#align=left&display=inline&height=132&originHeight=132&originWidth=649&status=uploading&width=649",alt:""}})]),t._v(" "),e("p",[t._v("3.响应首部字段"),e("br"),e("img",{attrs:{src:"https://user-images.githubusercontent.com/21194931/56130143-b365f180-5fb6-11e9-9d34-22c3e41c18ba.png#align=left&display=inline&height=57&originHeight=57&originWidth=648&status=uploading&width=648",alt:""}})]),t._v(" "),e("p",[t._v("4.实体首部字段"),e("br"),e("img",{attrs:{src:"https://user-images.githubusercontent.com/21194931/56130159-bd87f000-5fb6-11e9-81ac-98e70067185e.png#align=left&display=inline&height=82&originHeight=82&originWidth=648&status=uploading&width=648",alt:""}})]),t._v(" "),e("p",[e("a",{attrs:{name:"725921ac"}})]),t._v(" "),e("h3",{attrs:{id:"首次请求规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#首次请求规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 首次请求规则")]),t._v(" "),e("p",[t._v("Http缓存主要涉及三个角色：一是浏览器，二是浏览器的缓存数据库，三是服务器。当浏览器端向服务器发出第一次请求时：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/21194931/56130179-caa4df00-5fb6-11e9-867f-a609f5a23982.png#align=left&display=inline&height=734&originHeight=734&originWidth=1166&status=uploading&width=1166",alt:""}})]),t._v(" "),e("p",[e("a",{attrs:{name:"17ef9bc6"}})]),t._v(" "),e("h2",{attrs:{id:"缓存的类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存的类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓存的类型")]),t._v(" "),e("blockquote",[e("p",[t._v("缓存的类型主要分为两种：强制缓存和协商缓存")])]),t._v(" "),e("p",[t._v("两类缓存规则可以同时存在，强制缓存优先级高于对比缓存，也就是说，当执行强制缓存的规则时，如果缓存生效，直接使用缓存，不再执行对比缓存规则。")]),t._v(" "),e("p",[e("a",{attrs:{name:"a80b42f8"}})]),t._v(" "),e("h3",{attrs:{id:"强制缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 强制缓存")]),t._v(" "),e("p",[t._v("强缓存基本原理是：所请求的数据在缓存数据库中尚未过期时，不与服务器进行交互，直接使用缓存数据库中的数据。当缓存未过期时基本流程如下")]),t._v(" "),e("p",[t._v("而控制强缓存过期时间的主要有两个规则字段：")]),t._v(" "),e("ol",[e("li",[t._v("Expire 其指定了一个日期/时间， 在这个日期/时间之后，HTTP响应被认为是过时的。但是它本身是一个HTTP1.0标准下的字段，所以如果请求中还有一个置了 “max-age” 或者 “s-max-age” 指令的Cache-Control响应头，那么 Expires 头就会被忽略。")]),t._v(" "),e("li",[t._v("Cache-Control通用消息头用于在http 请求和响应中通过指定指令来实现缓存机制。其常用的几个取值有：")])]),t._v(" "),e("p",[t._v("private：客户端可以缓存"),e("br"),t._v("public：客户端和代理服务器都可以缓存"),e("br"),t._v("max-age=xxx：缓存的内容将在xxx 秒后失效"),e("br"),t._v("s-max-age=xxx：同s-max-age，但仅适用于共享缓存(比如各个代理)，并且私有缓存中忽略。"),e("br"),t._v("no-cache：需要使用协商缓存来验证缓存数据"),e("br"),t._v("no-store：所有内容都不会缓存，强缓存和协商缓存都不会触发"),e("br"),t._v("must-revalidate：缓存必须在使用之前验证旧资源的状态，并且不可使用过期资源。")]),t._v(" "),e("p",[t._v("例如:"),e("br"),e("img",{attrs:{src:"https://user-images.githubusercontent.com/21194931/56130194-d2648380-5fb6-11e9-902c-eb23b7220445.png#align=left&display=inline&height=668&originHeight=668&originWidth=1736&status=uploading&width=1736",alt:""}})]),t._v(" "),e("p",[t._v("其中的Cache-Control字段中即标识了缓存可以被客户端和代理服务器缓存，并且缓存的时间为315…秒(365天)后失效，我们在执行这一请求时在其缓存过期时间之内，所以直接命中并从磁盘中读取，不需要与服务器交互。")]),t._v(" "),e("p",[e("a",{attrs:{name:"f9465812"}})]),t._v(" "),e("h3",{attrs:{id:"协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),e("p",[t._v("协商存基本原理是：浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。"),e("br"),t._v("再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据")]),t._v(" "),e("p",[e("a",{attrs:{name:"1dc7a96f"}})]),t._v(" "),e("h4",{attrs:{id:"last-modified-if-modified-since规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since规则","aria-hidden":"true"}},[t._v("#")]),t._v(" Last-Modified/If-Modified-Since规则")]),t._v(" "),e("p",[e("a",{attrs:{name:"ee3f3a98"}})]),t._v(" "),e("h5",{attrs:{id:"last-modified："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified：","aria-hidden":"true"}},[t._v("#")]),t._v(" Last-Modified：")]),t._v(" "),e("p",[t._v("服务器在响应请求时，告诉浏览器资源的最后修改时间。")]),t._v(" "),e("p",[e("a",{attrs:{name:"89c1e98b"}})]),t._v(" "),e("h5",{attrs:{id:"if-modified-since："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-modified-since：","aria-hidden":"true"}},[t._v("#")]),t._v(" If-Modified-Since：")]),t._v(" "),e("p",[t._v("再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。"),e("br"),t._v("服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。"),e("br"),t._v("若资源的最后修改时间大于If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码200；"),e("br"),t._v("若资源的最后修改时间小于或等于If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。")]),t._v(" "),e("p",[e("a",{attrs:{name:"cf5e7096"}})]),t._v(" "),e("h4",{attrs:{id:"etag-if-none-match规则（优先级高于last-modified-if-modified-since）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match规则（优先级高于last-modified-if-modified-since）","aria-hidden":"true"}},[t._v("#")]),t._v(" Etag/If-None-Match规则（优先级高于Last-Modified/If-Modified-Since）")]),t._v(" "),e("p",[e("a",{attrs:{name:"5849df01"}})]),t._v(" "),e("h5",{attrs:{id:"etag："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag：","aria-hidden":"true"}},[t._v("#")]),t._v(" Etag：")]),t._v(" "),e("p",[t._v("服务器资源的唯一标识符, 浏览器可以根据ETag值缓存数据, 节省带宽. 如果资源已经改变, etag可以帮助防止同步更新资源的相互覆盖. ETag 优先级比 Last-Modified 高.")]),t._v(" "),e("p",[e("a",{attrs:{name:"0fb1b73a"}})]),t._v(" "),e("h5",{attrs:{id:"if-none-match："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-none-match：","aria-hidden":"true"}},[t._v("#")]),t._v(" If-None-Match：")]),t._v(" "),e("p",[t._v("再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。"),e("br"),t._v("服务器收到请求后发现有头If-None-Match 则与被请求资源的唯一标识进行比对，"),e("br"),t._v("不同，说明资源又被改动过，则响应整片资源内容，返回状态码200；"),e("br"),t._v("相同，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。")]),t._v(" "),e("p",[t._v("浏览器第二次请求过程：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/21194931/56130204-d8f2fb00-5fb6-11e9-9cf7-f4f03a3c87de.png#align=left&display=inline&height=531&originHeight=531&originWidth=556&status=uploading&width=556",alt:""}})]),t._v(" "),e("p",[e("a",{attrs:{name:"41734eb8"}})]),t._v(" "),e("h3",{attrs:{id:"不能缓存的请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不能缓存的请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 不能缓存的请求")]),t._v(" "),e("p",[t._v("1.不能被缓存的请求HTTP 信息头中包含Cache-Control:no-cache，pragma:no-cache，或Cache-Control:max-age=0 等告诉浏览器不用缓存的请求"),e("br"),t._v("2.需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的"),e("br"),t._v("3.经过HTTPS安全加密的请求（有人也经过测试发现，ie 其实在头部加入 Cache-Control：max-age 信息，firefox 在头部加入 Cache-Control:Public 之后，能够对HTTPS的资源进行缓存）"),e("br"),t._v("4.HTTP 响应头中不包含 Last-Modified/Etag，也不包含 Cache-Control/Expires 的请求无法被缓存"),e("br"),t._v("5.目前浏览器的实现是不会对POST请求的响应做缓存的（从语义上来说也不应该），并且规范中也规定了返回状态码不允许是304。不过这并不表示POST的响应不能被缓存，根据RFC 7231 - Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content中描述的，如果在POST请求对应的响应中包含Freshness相关信息的话，这次响应也是可以被缓存，具体可以参考上面的那个链接")]),t._v(" "),e("p",[e("a",{attrs:{name:"d8af35c6"}})]),t._v(" "),e("h3",{attrs:{id:"缓存的优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存的优先级","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓存的优先级")]),t._v(" "),e("blockquote",[e("p",[t._v("Pragma > Cache-Control > Expires > ETag > Last-Modified")])]),t._v(" "),e("p",[t._v("参考资料："),e("br"),e("a",{attrs:{href:"https://segmentfault.com/a/1190000010690320",target:"_blank",rel:"noopener noreferrer"}},[t._v("http协议缓存机制"),e("OutboundLink")],1),e("br"),e("a",{attrs:{href:"http://www.cnblogs.com/vajoy/p/5341664.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅谈浏览器http的缓存机制"),e("OutboundLink")],1),e("br"),e("a",{attrs:{href:"https://blog.csdn.net/jutal_ljt/article/details/80021545",target:"_blank",rel:"noopener noreferrer"}},[t._v("Http缓存机制与原理"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);