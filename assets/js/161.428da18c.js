(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{202:function(t,r,a){"use strict";a.r(r);var e=a(0),s=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"计算机网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络","aria-hidden":"true"}},[t._v("#")]),t._v(" 计算机网络")]),t._v(" "),a("p",[a("a",{attrs:{name:"Bm1Ai"}})]),t._v(" "),a("h3",{attrs:{id:"tcp三次握手和四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手和四次挥手","aria-hidden":"true"}},[t._v("#")]),t._v(" TCP三次握手和四次挥手")]),t._v(" "),a("ul",[a("li",[t._v("三次握手：")])]),t._v(" "),a("p",[t._v("TCP的连接建立是一个三次握手过程，目的是为了通信双方确认开始序号"),a("br"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/218767/1567479861436-9abb06fe-521c-4b80-9cb3-7dc23ad381a4.png#align=left&display=inline&height=317&name=image.png&originHeight=634&originWidth=1080&size=225998&status=done&width=540",alt:"image.png"}})]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("连接开始时，连接建立方(Client)发送SYN包，并包含了自己的初始序号a；")]),t._v(" "),a("li",[t._v("连接接受方(Server)收到SYN包以后会回复一个SYN包，其中包含了对上一个a包的回应信息ACK，回应的序号为下一个希望收到包的序号，即a＋1，然后还包含")]),t._v(" "),a("li",[t._v("连接建立方(Client)收到回应的SYN包以后，回复一个ACK包做响应，其中包含了下一个希望收到包的序号即b＋1")])])]),t._v(" "),a("ul",[a("li",[t._v("四次挥手")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/218767/1567479872948-59a4f9d2-d057-4109-ab34-66e93a6db232.png#align=left&display=inline&height=365&name=image.png&originHeight=730&originWidth=1080&size=295524&status=done&width=540",alt:"image.png"}})]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("首先进行关闭的一方（即发送第一个FIN）将执行主动关闭，而另一方（收到这个FIN）执行被动关闭")]),t._v(" "),a("li",[t._v("当服务器收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号")]),t._v(" "),a("li",[t._v("同时TCP服务器还向应用程序（即丢弃服务器）传送一个文件结束符。接着这个服务器程序就关闭它的连接，导致它的TCP端发送一个FIN")]),t._v(" "),a("li",[t._v("客户必须发回一个确认，并将确认序号设置为收到序号加1")])])]),t._v(" "),a("p",[t._v("如果两端把数据都发完了后均只发送一次包告诉对方数据完了，而不发送给对方确认包可以吗？我理解是可以的，但是为了保证发的第一次结束确认包能得到对方回复确实收到了而不是丢失，所以各自要多一次确认包，如果丢失了回传的确认包，则发起的一方不管是过去时候丢了还是回来的时候丢了都会重新发起确认，从而耗费资源。\n"),a("a",{attrs:{name:"W4ESJ"}})]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[t._v("#")])]),t._v(" "),a("p",[a("a",{attrs:{name:"qV10f"}})]),t._v(" "),a("h3",{attrs:{id:"tcp和udp的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" TCP和UDP的区别")]),t._v(" "),a("p",[t._v("（1）TCP是面向连接的，udp是无连接的即发送数据前不需要先建立链接。"),a("br"),t._v("（2）TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。 并且因为tcp可靠，面向连接，不会丢失数据因此适合大数据量的交换。"),a("br"),t._v("（3）TCP是面向字节流，UDP面向报文，并且网络出现拥塞不会使得发送速率降低（因此会出现丢包，对实时的应用比如IP电话和视频会议等）。"),a("br"),t._v("（4）TCP只能是1对1的，UDP支持1对1,1对多。"),a("br"),t._v("（5）TCP的首部较大为20字节，而UDP只有8字节。"),a("br"),t._v("（6）TCP是面向连接的可靠性传输，而UDP是不可靠的。"),a("br"),a("strong",[t._v("socket、tcp、udp、http 的认识及区别")]),a("br"),t._v("一、先来一个讲TCP、UDP和HTTP关系的"),a("br"),t._v("1、TCP/IP是个协议组，可分为三个层次：网络层、传输层和应用层。"),a("br"),t._v("在网络层有IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议。 在传输层中有TCP协议与UDP协议。"),a("br"),t._v("在应用层有FTP、HTTP、TELNET、SMTP、DNS等协议。"),a("br"),t._v("因此，HTTP本身就是一个协议，是从Web服务器传输超文本到本地浏览器的传送协议。"),a("br"),t._v("2、HTTP协议是建立在请求/响应模型上的。"),a("br"),t._v("首先由客户建立一条与服务器的TCP链接，并发送一个请求到服务器，"),a("br"),t._v("请求中包含请求方法、URI、协议版本以及相关的MIME样式的消息。"),a("br"),t._v("服务器响应一个状态行，包含消息的协议版本、一个成功和失败码以及相关的MIME式样的消息。"),a("br"),t._v("HTTP/1.0为每一次HTTP的请求/响应建立一条新的TCP链接，"),a("br"),t._v("因此一个包含HTML内容和图片的页面将需要建立多次的短期的TCP链接。"),a("br"),t._v("一次TCP链接的建立将需要3次握手。"),a("br"),t._v("另外，为了获得适当的传输速度，则需要TCP花费额外的回路链接时间（RTT）。"),a("br"),t._v("每一次链接的建立需要这种经常性的开销，而其并不带有实际有用的数据，只是保证链接的可靠性，因此HTTP/1.1提出了可持续链接的实现方法。"),a("br"),t._v("HTTP/1.1将只建立一次TCP的链接而重复地使用它传输一系列的请求/响应消息，因此减少了链接建立的次数和经常性的链接开销。"),a("br"),t._v("3、结论："),a("br"),t._v("虽然HTTP本身是一个协议，但其最终还是基于TCP的。不过，目前，有人正在研究基于TCP+UDP混合的HTTP协议。"),a("br"),t._v("Socket是什么呢？Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，"),a("br"),t._v("Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，"),a("br"),t._v("对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。"),a("br"),t._v("HTTP、TCP、UDP、Socket "),a("wbr"),t._v(" "),a("wbr"),t._v(" "),a("wbr"),t._v("(转)"),a("br"),a("strong",[t._v("二、TCP、UDP、HTTP、SOCKET之间的区别")]),a("br"),t._v("TCP和UDP：传输层协议；"),a("br"),t._v("HTTP：应用层协议；"),a("br"),t._v("SOCKET：TCP/IP网络的API。"),a("br"),t._v("TCP/IP代表传输控制协议/网际协议，指的是一系列协议。"),a("br"),t._v("TCP和UDP使用IP协议从一个网络传送数据包到另一个网络。把IP想像成一种高速公路，它允许其它协议在上面行驶并找到到其它电脑的出口。"),a("br"),t._v("TCP和UDP是高速公路上的“卡车”，它们携带的货物就是像HTTP，文件传输协议FTP这样的协议等。"),a("br"),t._v("TCP和UDP是FTP、HTTP和SMTP之类使用的传输层协议。"),a("br"),t._v("虽然TCP和UDP都是用来传输其他协议的，它们却有一个显著的不同：TCP提供有保证的数据传输，而UDP不提供。"),a("br"),t._v("这意味着TCP有一个特殊的机制来确保数据安全的不出错的从一个端点传到另一个端点，而UDP不提供任何这样的保证。"),a("br"),t._v("HTTP(超文本传输协议)是利用TCP在两台电脑(通常是Web服务器和客户端)之间传输信息的协议。"),a("br"),t._v("客户端使用Web浏览器发起HTTP请求给Web服务器，Web服务器发送被请求的信息给客户端。"),a("br"),t._v("记住，需要IP协议来连接网络;TCP是一种允许我们安全传输数据的机制，使用TCP协议来传输数据的HTTP是Web服务器和客户端使用的特殊协议。"),a("br"),t._v("Socket 接口是TCP/IP网络的API，Socket接口定义了许多函数或例程，用以开发TCP/IP网络上的应用程序。"),a("br"),a("strong",[t._v("三、socket、tcp、udp、http 的认识及区别")]),a("br"),t._v("网络由下往上分为物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。"),a("br"),t._v("IP 协议对应于网络层，TCP协议对应于传输层，HTTP协议对应于应用层，三者从本质上来说没有可比性，socket则是对TCP/IP协议的封装和应用。"),a("br"),t._v("可以说，TPC/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据"),a("br"),t._v("socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），"),a("br"),t._v("通过Socket，我们才能使用TCP/IP协议。"),a("br"),t._v("实际上，Socket跟TCP/IP协议没有必然的联系。Socket编程接口在设计的时候，就希望也能适应其他的网络协议。"),a("br"),t._v("所以说，Socket的出现只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，"),a("br"),t._v("从而形成了我们知道的一些最基本的函数接口，比如create、 listen、connect、accept、send、read和write等等"),a("br"),t._v("实际上，传输层的TCP是基于网络层的IP协议的，而应用层的HTTP协议又是基于传输层的TCP协议的，"),a("br"),t._v("而Socket本身不算是协议，就像上面所说，它只是提供了一个针对TCP或者UDP编程的接口"),a("br"),t._v("TCP连接的三次握手："),a("br"),t._v("第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；"),a("br"),t._v("第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；"),a("br"),t._v("第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。  "),a("br"),t._v("握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据"),a("br"),t._v("断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”"),a("br"),t._v("TCP是面向链接的，虽然说网络的不安全不稳定特性决定了多少次握手都不能保证连接的可靠性，"),a("br"),t._v("但TCP的三次握手在最低限度上（实际上也很大程度上保证了）保证了连接的可靠性；"),a("br"),t._v("而UDP不是面向连接的，UDP传送数据前并不与对方建立连接，对接收到的数据也不发送确认信号，"),a("br"),t._v("发送端不知道数据是否会正确接收，当然也不用重发，所以说UDP是无连接的、不可靠的一种数据传输协议"),a("br"),t._v("也正由于上面的特点，使得UDP的开销更小数据传输速率更高，因为不必进行收发数据的确认，所以UDP的实时性更好。"),a("br"),t._v("所以采用TCP传输协议的MSN比采用UDP的QQ传输文件慢，"),a("br"),t._v("但并不能说QQ的通信是不安全的，因为程序员可以手动对UDP的数据收发进行验证，"),a("br"),t._v("比如发送方对每个数据包进行编号然后由接收方进行验证啊什么的，"),a("br"),t._v("即使是这样，UDP因为在底层协议的封装上没有采用类似 TCP的“三次握手”而实现了TCP所无法达到的传输效率。")]),t._v(" "),a("p",[a("a",{attrs:{name:"tbE4n"}})]),t._v(" "),a("h3",{attrs:{id:"http与-https-握手过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http与-https-握手过程","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTP与 HTTPS 握手过程")]),t._v(" "),a("p",[a("strong",[t._v("HTTP 握手过程")]),a("br"),t._v("第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；"),a("br"),t._v("第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；"),a("br"),t._v("第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。"),a("br"),a("strong",[t._v("HTTPS 握手过程")]),a("br"),t._v("1.建立服务器443端口连接"),a("br"),t._v("2.SSL握手：随机数，证书，密钥，加密算法"),a("br"),t._v("3.发送加密请求"),a("br"),t._v("4.发送加密响应"),a("br"),t._v("5.关闭SSL"),a("br"),t._v("6.关闭TCP"),a("br"),t._v("1.客户端发起HTTPS请求"),a("br"),t._v("2.服务端的配置"),a("br"),t._v("采用HTTPS协议的服务器必须要有一套数字证书，可以是自己制作或者CA证书。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用CA证书则不会弹出提示页面。这套证书其实就是一对公钥和私钥。公钥给别人加密使用，私钥给自己解密使用。"),a("br"),t._v("3.传送证书"),a("br"),t._v("这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等。"),a("br"),t._v("4.客户端解析证书"),a("br"),t._v("这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值，然后用证书对该随机值进行加密。"),a("br"),t._v("5.传送加密信息"),a("br"),t._v("这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。"),a("br"),t._v("6.服务段解密信息"),a("br"),t._v("服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。"),a("br"),t._v("7.传输加密后的信息"),a("br"),t._v("这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。"),a("br"),t._v("8.客户端解密信息"),a("br"),t._v("客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。"),a("br"),t._v("PS: 整个握手过程第三方即使监听到了数据，也束手无策。"),a("br"),a("strong",[t._v("https握手时客户端如何验证证书的合法性")]),a("br"),t._v("客户端会有一个有效证书串，一般的浏览器都会内置很多常见服务器的这个证书，特殊的服务器就需要前期通过手工将证书添加到客户端。证明对方是否持有证书的对应的私钥,客户端通过比对来确认证书的有效性"),a("br"),a("strong",[t._v("为什么HTTPS是安全的？")]),a("br"),t._v("在HTTPS握手的第四步中，如果站点的证书是不受信任的，会显示出现下面确认界面，确认了网站的真实性。另外第六和八步，使用客户端私钥加密解密，保证了数据传输的安全。"),a("br"),t._v("HTTPS一般使用的加密与HASH算法如下："),a("br"),t._v("非对称加密算法：RSA，DSA/DSS"),a("br"),t._v("对称加密算法：AES，RC4，3DES"),a("br"),t._v("HASH算法：MD5，SHA1，SHA256"),a("br"),t._v("注意https加密是在传输层"),a("br"),t._v("https报文在被包装成tcp报文的时候完成加密的过程，无论是https的header域也好，body域也罢都是会被加密的。"),a("br"),t._v("当使用tcpdump或者wireshark之类的tcp层工具抓包，获取是加密的内容，而如果用应用层抓包，使用Charels(Mac)、Fildder(Windows)抓包工具，那当然看到是明文的。"),a("br"),a("strong",[t._v("HTTPS和HTTP的区别")])]),t._v(" "),a("ol",[a("li",[t._v("https协议需要到ca申请证书或自制证书。"),a("br")]),t._v(" "),a("li",[t._v("http的信息是明文传输，https则是具有安全性的ssl加密。"),a("br")]),t._v(" "),a("li",[t._v("http是直接与TCP进行数据传输，而https是经过一层SSL（OSI表示层），用的端口也不一样，前者是80（需要国内备案），后者是443。"),a("br")]),t._v(" "),a("li",[t._v("http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。")])]),t._v(" "),a("p",[a("a",{attrs:{name:"89IHk"}})]),t._v(" "),a("h3",{attrs:{id:"http的状态码请求方式，以及http-head（http头）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http的状态码请求方式，以及http-head（http头）","aria-hidden":"true"}},[t._v("#")]),t._v(" http的状态码请求方式，以及HTTP HEAD（HTTP头）")]),t._v(" "),a("p",[a("strong",[t._v("HTTP Method 请求方法")]),a("br"),t._v("在requestline里面的方法部分，表示HTTP的操作类型，常见的几种请求方法如下：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("GET：浏览器通过地址访问页面均属于get请求")]),t._v(" "),a("li",[t._v("POST：常见的表单提交")]),t._v(" "),a("li",[t._v("HEAD ：跟get类似，区别在于只返回请求头")]),t._v(" "),a("li",[t._v("PUT：表示添加资源")]),t._v(" "),a("li",[t._v("DELETE：表示删除资源")]),t._v(" "),a("li",[t._v("CONNECT： 多用于HTTPS和WebSocket")]),t._v(" "),a("li",[t._v("OPTIONS")]),t._v(" "),a("li",[t._v("TRACE")])])]),t._v(" "),a("p",[a("strong",[t._v("HTTP Status code状态码")]),a("br"),t._v("常见的状态码有以下几种：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("1xx：临时回应")]),t._v(" "),a("li",[t._v("2xx：请求成功，如200")]),t._v(" "),a("li",[t._v("3xx：请求目标有变化，如302和301表示临时和永久重定向，304表示客户端没有更新内容")]),t._v(" "),a("li",[t._v("4xx;请求错误，如403无权限，404访问的资源不存在")]),t._v(" "),a("li",[t._v("5xx：服务端错误，如500服务端错误，503服务端暂时错误等")]),t._v(" "),a("li",[t._v("1XX：信息状态码")]),t._v(" "),a("li",[t._v("100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息")]),t._v(" "),a("li",[t._v("2XX：成功状态码")]),t._v(" "),a("li",[t._v("200 OK 正常返回信息")]),t._v(" "),a("li",[t._v("201 Created 请求成功并且服务器创建了新的资源")]),t._v(" "),a("li",[t._v("202 Accepted 服务器已接受请求，但尚未处理")]),t._v(" "),a("li",[t._v("3XX：重定向")]),t._v(" "),a("li",[t._v("301 Moved Permanently 请求的网页已永久移动到新位置。")]),t._v(" "),a("li",[t._v("302 Found 临时性重定向。")]),t._v(" "),a("li",[t._v("303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。")]),t._v(" "),a("li",[t._v("304 Not Modified 自从上次请求后，请求的网页未修改过。")]),t._v(" "),a("li",[t._v("4XX：客户端错误")]),t._v(" "),a("li",[t._v("400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。")]),t._v(" "),a("li",[t._v("401 Unauthorized 请求未授权。")]),t._v(" "),a("li",[t._v("403 Forbidden 禁止访问。")]),t._v(" "),a("li",[t._v("404 Not Found 找不到如何与 URI 相匹配的资源。")]),t._v(" "),a("li",[t._v("5XX: 服务器错误")]),t._v(" "),a("li",[t._v("500 Internal Server Error 最常见的服务器端错误。")]),t._v(" "),a("li",[t._v("503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。")])])]),t._v(" "),a("p",[t._v("在前端开发中，最熟悉的系列无非是大家都喜欢的200请求成功的标志，在面试中，问得较多的是304缓存问题和301、302重定向的问题。\n"),a("a",{attrs:{name:"mCsKn"}})]),t._v(" "),a("h3",{attrs:{id:"http缓存机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http缓存机制","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTP缓存机制")]),t._v(" "),a("p",[t._v("Http 缓存机制作为 web 性能优化的重要手段，对从事 Web 开发的小伙伴们来说是必须要掌握的知识，要想彻底搞懂HTTP缓存机制"),a("br"),t._v("那就需从HTTP缓存基本概念说起。")]),t._v(" "),a("p",[a("a",{attrs:{name:"ztFvA"}})]),t._v(" "),a("h3",{attrs:{id:"http缓存基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http缓存基本概念","aria-hidden":"true"}},[t._v("#")]),t._v(" Http缓存基本概念")]),t._v(" "),a("p",[a("strong",[t._v("Http报文")]),a("br"),t._v("在浏览器和服务器进行Http通信时发送的数据即为Http报文，其中分为两部分："),a("br"),t._v("1.header - 报文的首部或头部，其中保存着各类请求的属性字段，关于Http的缓存相关规则信息均保存在header中"),a("br"),t._v("2.body - 请求体部分，Http请求真正传输的主体部分\n"),a("a",{attrs:{name:"zS9iC"}})]),t._v(" "),a("h3",{attrs:{id:"与缓存相关的首部字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与缓存相关的首部字段","aria-hidden":"true"}},[t._v("#")]),t._v(" 与缓存相关的首部字段")]),t._v(" "),a("p",[t._v("1.通用首部字段"),a("br"),a("a",{attrs:{href:"https://user-images.githubusercontent.com/21194931/56130129-a8ab5c80-5fb6-11e9-8294-2da41892ccdf.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/218767/1566914296650-15e2e629-5ab8-4b66-92fc-a60479f267c0.png#align=left&display=inline&height=82&originHeight=82&originWidth=649&size=0&status=done&width=649",alt:""}}),a("OutboundLink")],1),a("br"),t._v("2.请求首部字段"),a("br"),a("a",{attrs:{href:"https://user-images.githubusercontent.com/21194931/56130136-ad701080-5fb6-11e9-8308-33dd69394269.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/218767/1566914299049-5400bced-9ef9-43ba-a706-c2eef9d5e6bd.png#align=left&display=inline&height=132&originHeight=132&originWidth=649&size=0&status=done&width=649",alt:""}}),a("OutboundLink")],1),a("br"),t._v("3.响应首部字段"),a("br"),a("a",{attrs:{href:"https://user-images.githubusercontent.com/21194931/56130143-b365f180-5fb6-11e9-9d34-22c3e41c18ba.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/218767/1566914295854-7429dea4-14b3-407c-b718-b102f952f61f.png#align=left&display=inline&height=57&originHeight=57&originWidth=648&size=0&status=done&width=648",alt:""}}),a("OutboundLink")],1),a("br"),t._v("4.实体首部字段"),a("br"),a("a",{attrs:{href:"https://user-images.githubusercontent.com/21194931/56130159-bd87f000-5fb6-11e9-81ac-98e70067185e.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/218767/1566914297961-7d544c73-fbc3-4f70-a2b5-a241c8bc2c01.png#align=left&display=inline&height=82&originHeight=82&originWidth=648&size=0&status=done&width=648",alt:""}}),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{name:"iCxh1"}})]),t._v(" "),a("h3",{attrs:{id:"首次请求规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首次请求规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 首次请求规则")]),t._v(" "),a("p",[t._v("Http缓存主要涉及三个角色：一是浏览器，二是浏览器的缓存数据库，三是服务器。当浏览器端向服务器发出第一次请求时："),a("br"),a("a",{attrs:{href:"https://user-images.githubusercontent.com/21194931/56130179-caa4df00-5fb6-11e9-867f-a609f5a23982.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/218767/1566914299016-af47c2ef-0653-482b-99d0-8bf2815d4828.png#align=left&display=inline&height=734&originHeight=734&originWidth=1166&size=0&status=done&width=1166",alt:""}}),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{name:"hi0WY"}})]),t._v(" "),a("h3",{attrs:{id:"缓存的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存的类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓存的类型")]),t._v(" "),a("blockquote",[a("p",[t._v("缓存的类型主要分为两种：强制缓存和协商缓存")])]),t._v(" "),a("p",[t._v("两类缓存规则可以同时存在，强制缓存优先级高于对比缓存，也就是说，当执行强制缓存的规则时，如果缓存生效，直接使用缓存，不再执行对比缓存规则。\n"),a("a",{attrs:{name:"410b0"}})]),t._v(" "),a("h3",{attrs:{id:"强制缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 强制缓存")]),t._v(" "),a("p",[t._v("强缓存基本原理是：所请求的数据在缓存数据库中尚未过期时，不与服务器进行交互，直接使用缓存数据库中的数据。当缓存未过期时基本流程如下"),a("br"),t._v("而控制强缓存过期时间的主要有两个规则字段：")]),t._v(" "),a("ol",[a("li",[t._v("Expire 其指定了一个日期/时间， 在这个日期/时间之后，HTTP响应被认为是过时的。但是它本身是一个HTTP1.0标准下的字段，所以如果请求中还有一个置了 “max-age” 或者 “s-max-age” 指令的Cache-Control响应头，那么 Expires 头就会被忽略。")]),t._v(" "),a("li",[t._v("Cache-Control通用消息头用于在http 请求和响应中通过指定指令来实现缓存机制。其常用的几个取值有：")])]),t._v(" "),a("p",[t._v("private：客户端可以缓存"),a("br"),t._v("public：客户端和代理服务器都可以缓存"),a("br"),t._v("max-age=xxx：缓存的内容将在xxx 秒后失效"),a("br"),t._v("s-max-age=xxx：同s-max-age，但仅适用于共享缓存(比如各个代理)，并且私有缓存中忽略。"),a("br"),t._v("no-cache：需要使用协商缓存来验证缓存数据"),a("br"),t._v("no-store：所有内容都不会缓存，强缓存和协商缓存都不会触发"),a("br"),t._v("must-revalidate：缓存必须在使用之前验证旧资源的状态，并且不可使用过期资源。"),a("br"),t._v("例如:"),a("br"),a("a",{attrs:{href:"https://user-images.githubusercontent.com/21194931/56130194-d2648380-5fb6-11e9-902c-eb23b7220445.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/218767/1566914297224-0d625dc4-3b30-4c2a-b146-d52d07638def.png#align=left&display=inline&height=668&originHeight=668&originWidth=1736&size=0&status=done&width=1736",alt:""}}),a("OutboundLink")],1),a("br"),t._v("其中的Cache-Control字段中即标识了缓存可以被客户端和代理服务器缓存，并且缓存的时间为315…秒(365天)后失效，我们在执行这一请求时在其缓存过期时间之内，所以直接命中并从磁盘中读取，不需要与服务器交互。\n"),a("a",{attrs:{name:"IWClW"}})]),t._v(" "),a("h3",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),a("p",[t._v("协商存基本原理是：浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。"),a("br"),t._v("再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据"),a("br"),a("strong",[t._v("Last-Modified/If-Modified-Since规则")]),t._v(" "),a("a",{attrs:{name:"TQJ7d"}})]),t._v(" "),a("h5",{attrs:{id:"last-modified："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#last-modified：","aria-hidden":"true"}},[t._v("#")]),t._v(" Last-Modified：")]),t._v(" "),a("p",[t._v("服务器在响应请求时，告诉浏览器资源的最后修改时间。\n"),a("a",{attrs:{name:"0994X"}})]),t._v(" "),a("h5",{attrs:{id:"if-modified-since："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-modified-since：","aria-hidden":"true"}},[t._v("#")]),t._v(" If-Modified-Since：")]),t._v(" "),a("p",[t._v("再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。"),a("br"),t._v("服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。"),a("br"),t._v("若资源的最后修改时间大于If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码200；"),a("br"),t._v("若资源的最后修改时间小于或等于If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。"),a("br"),a("strong",[t._v("Etag/If-None-Match规则（优先级高于Last-Modified/If-Modified-Since）")]),t._v(" "),a("a",{attrs:{name:"xsePD"}})]),t._v(" "),a("h5",{attrs:{id:"etag："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etag：","aria-hidden":"true"}},[t._v("#")]),t._v(" Etag：")]),t._v(" "),a("p",[t._v("服务器资源的唯一标识符, 浏览器可以根据ETag值缓存数据, 节省带宽. 如果资源已经改变, etag可以帮助防止同步更新资源的相互覆盖. ETag 优先级比 Last-Modified 高.\n"),a("a",{attrs:{name:"Anf4d"}})]),t._v(" "),a("h5",{attrs:{id:"if-none-match："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-none-match：","aria-hidden":"true"}},[t._v("#")]),t._v(" If-None-Match：")]),t._v(" "),a("p",[t._v("再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。"),a("br"),t._v("服务器收到请求后发现有头If-None-Match 则与被请求资源的唯一标识进行比对，"),a("br"),t._v("不同，说明资源又被改动过，则响应整片资源内容，返回状态码200；"),a("br"),t._v("相同，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。"),a("br"),t._v("浏览器第二次请求过程："),a("br"),a("a",{attrs:{href:"https://user-images.githubusercontent.com/21194931/56130204-d8f2fb00-5fb6-11e9-9cf7-f4f03a3c87de.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/218767/1566914304275-7d128cb2-64da-40e2-9600-d692151f8237.png#align=left&display=inline&height=531&originHeight=531&originWidth=556&size=0&status=done&width=556",alt:""}}),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{name:"1zSyN"}})]),t._v(" "),a("h3",{attrs:{id:"不能缓存的请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不能缓存的请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 不能缓存的请求")]),t._v(" "),a("p",[t._v("1.不能被缓存的请求HTTP 信息头中包含Cache-Control:no-cache，pragma:no-cache，或Cache-Control:max-age=0 等告诉浏览器不用缓存的请求"),a("br"),t._v("2.需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的"),a("br"),t._v("3.经过HTTPS安全加密的请求（有人也经过测试发现，ie 其实在头部加入 Cache-Control：max-age 信息，firefox 在头部加入 Cache-Control:Public 之后，能够对HTTPS的资源进行缓存）"),a("br"),t._v("4.HTTP 响应头中不包含 Last-Modified/Etag，也不包含 Cache-Control/Expires 的请求无法被缓存"),a("br"),t._v("5.目前浏览器的实现是不会对POST请求的响应做缓存的（从语义上来说也不应该），并且规范中也规定了返回状态码不允许是304。不过这并不表示POST的响应不能被缓存，根据RFC 7231 - Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content中描述的，如果在POST请求对应的响应中包含Freshness相关信息的话，这次响应也是可以被缓存，具体可以参考上面的那个链接\n"),a("a",{attrs:{name:"g1PPs"}})]),t._v(" "),a("h3",{attrs:{id:"缓存的优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存的优先级","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓存的优先级")]),t._v(" "),a("blockquote",[a("p",[t._v("Pragma > Cache-Control > Expires > ETag > Last-Modified")])]),t._v(" "),a("p",[a("a",{attrs:{name:"stG9Q"}})]),t._v(" "),a("h3",{attrs:{id:"https的工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https的工作原理","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTPS的工作原理")]),t._v(" "),a("p",[t._v("HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL协议不仅仅是一套加密传输的协议，更是一件经过艺术家精心设计的艺术品，TLS/SSL中使用了非对称加密，对称加密以及HASH算法。握手过程的简单描述如下：")]),t._v(" "),a("ul",[a("li",[t._v("浏览器将自己支持的一套加密规则发送给网站。"),a("br")]),t._v(" "),a("li",[t._v("网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。"),a("br")]),t._v(" "),a("li",[t._v("获得网站证书之后浏览器要做以下工作："),a("br")])]),t._v(" "),a("p",[t._v("a) 验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。"),a("br"),t._v("如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。")]),t._v(" "),a("ul",[a("li",[t._v("使用约定好的HASH计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给网站。"),a("br")]),t._v(" "),a("li",[t._v("4.网站接收浏览器发来的数据之后要做以下的操作："),a("br")])]),t._v(" "),a("p",[t._v("a) 使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。"),a("br"),t._v("b) 使用密码加密一段握手消息，发送给浏览器。")]),t._v(" "),a("ul",[a("li",[t._v("5.浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密。")])]),t._v(" "),a("p",[a("a",{attrs:{name:"4dMIW"}})]),t._v(" "),a("h3",{attrs:{id:"https对称加密和非对称加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https对称加密和非对称加密","aria-hidden":"true"}},[t._v("#")]),t._v(" https对称加密和非对称加密")]),t._v(" "),a("p",[a("strong",[t._v("对称加密：")]),a("br"),t._v("发送方和接收方需要持有同一把密钥，发送消息和接收消息均使用该密钥。相对于非对称加密，对称加密具有更高的加解密速度，但双方都需要事先知道密钥，密钥在传输过程中可能会被窃取，因此安全性没有非对称加密高。"),a("br"),a("strong",[t._v("非对称加密：")]),a("br"),t._v("接收方在发送消息前需要事先生成公钥和私钥，然后将公钥发送给发送方。发送放收到公钥后，将待发送数据用公钥加密，发送给接收方。接收到收到数据后，用私钥解密。"),a("br"),t._v("在这个过程中，公钥负责加密，私钥负责解密，数据在传输过程中即使被截获，攻击者由于没有私钥，因此也无法破解。"),a("br"),t._v("非对称加密算法的加解密速度低于对称加密算法，但是安全性更高。"),a("br"),a("strong",[t._v("几个名词要理清")]),a("br"),t._v("RSA：非对称加密"),a("br"),t._v("AES：对称加密 生成一个随机字符串key 只有客户端和服务端有 他们两个通过这个key对数据加密和传输跟解密 这一个统称对称加密"),a("br"),t._v("CA：权威认证机构 服务器在建站的时候 去CA认证机构认证 得到对应的数字签名 相当于身份证号 客户端每次安装浏览器的时候 都会下载最新的CA列表 这个列表有对应的数字签名和服务器IP一一对应的列表 这就是为什么我们自己搭建的localhost没法发https的原因 因为没法进行CA认证"),a("br"),t._v("数字证书：包含了数字签名跟RSA公钥"),a("br"),t._v("数字签名：保证数字证书一定是服务器传给客户端的 相当于服务器的身份证ID"),a("br"),t._v("对称密钥： 对数据进行加密的key"),a("br"),t._v("非对称密钥： （k1， k2） k1加密的数据 只有k2能解开 k1位非对称公钥 k2为非对称私钥"),a("br"),t._v("非对称公钥：RSA公钥 k1加密的数据 只有k2能解开"),a("br"),t._v("非对称私钥：RSA私钥 k1加密的数据 只有k2能解开")]),t._v(" "),a("p",[a("a",{attrs:{name:"ipzKa"}})]),t._v(" "),a("h3",{attrs:{id:"https-中间人攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https-中间人攻击","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTPS 中间人攻击")]),t._v(" "),a("p",[t._v("中间人攻击，即所谓的Man-in-the-middle attack(MITM)，顾名思义，就是攻击者插入到原本直接通信的双方，让双方以为还在直接跟对方通讯，但实际上双方的通信对方已变成了中间人，信息已经是被中间人获取或篡改"),a("br"),a("strong",[t._v("1.SSL证书欺骗攻击")]),a("br"),t._v("此类攻击较为简单常见。首先通过ARP欺骗、DNS劫持甚至网关劫持等等，将客户端的访问重定向到攻击者的机器，让客户端机器与攻击者机器建立HTTPS连接（使用伪造证书），而攻击者机器再跟服务端连接。这样用户在客户端看到的是相同域名的网站，但浏览器会提示证书不可信，用户不点击继续浏览就能避免被劫持的。所以这是最简单的攻击方式，也是最容易识别的攻击方式。"),a("br"),a("a",{attrs:{href:"https://user-images.githubusercontent.com/21194931/59647024-230d7e00-91ac-11e9-8da8-ed7748dff5ba.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/218767/1566914668301-7f7e31fd-a9b5-4ca6-99aa-37f37a7e1099.png#align=left&display=inline&height=233&originHeight=233&originWidth=633&size=0&status=done&width=633",alt:""}}),a("OutboundLink")],1),a("br"),t._v("钓鱼类攻击，App直接调用系统API创建的HTTPS连接（NSURLConnection）一般不会受到影响，只使用默认的系统校验，只要系统之前没有信任相关的伪造证书，校验就直接失败，不会SSL握手成功；但如果是使用WebView浏览网页，需要在UIWebView中加入较强的授权校验，禁止用户在校验失败的情况下继续访问。"),a("br"),a("strong",[t._v("2.SSL剥离攻击（SSLStrip）")]),a("br"),t._v("SSL剥离，即将HTTPS连接降级到HTTP连接。假如客户端直接访问HTTPS的URL，攻击者是没办法直接进行降级的，因为HTTPS与HTTP虽然都是TCP连接，但HTTPS在传输HTTP数据之前，需要在进行了SSL握手，并协商传输密钥用来后续的加密传输；假如客户端与攻击者进行SSL握手，而攻击者无法提供可信任的证书来让客户端验证通过进行连接，所以客户端的系统会判断为SSL握手失败，断开连接。"),a("br"),t._v("该攻击方式主要是利用用户并不会每次都直接在浏览器上输入"),a("a",{attrs:{href:"https://xxx.xxx.com%E6%9D%A5%E8%AE%BF%E9%97%AE%E7%BD%91%E7%AB%99%EF%BC%8C%E6%88%96%E8%80%85%E6%9C%89%E4%BA%9B%E7%BD%91%E7%AB%99%E5%B9%B6%E9%9D%9E%E5%85%A8%E7%BD%91https%EF%BC%8C%E8%80%8C%E6%98%AF%E5%8F%AA%E5%9C%A8%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%97%B6%E6%89%8D%E4%BD%BF%E7%94%A8https%E7%9A%84%E6%BC%8F%E6%B4%9E%E3%80%82%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%E8%80%85%E5%9C%A8%E5%8A%AB%E6%8C%81%E4%BA%86%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84http%E4%BC%9A%E8%AF%9D%E5%90%8E%EF%BC%8C%E5%B0%86http%E9%A1%B5%E9%9D%A2%E9%87%8C%E9%9D%A2%E6%89%80%E6%9C%89%E7%9A%84https//%E8%B6%85%E9%93%BE%E6%8E%A5%E9%83%BD%E6%8D%A2%E6%88%90http://%EF%BC%8C%E7%94%A8%E6%88%B7%E5%9C%A8%E7%82%B9%E5%87%BB%E7%9B%B8%E5%BA%94%E7%9A%84%E9%93%BE%E6%8E%A5%E6%97%B6%EF%BC%8C%E6%98%AF%E4%BD%BF%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%EF%BC%9B%E8%BF%99%E6%A0%B7%EF%BC%8C%E5%B0%B1%E7%AE%97%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AF%B9%E7%9B%B8%E5%BA%94%E7%9A%84URL%E5%8F%AA%E6%94%AF%E6%8C%81HTTPS%E9%93%BE%E6%8E%A5%EF%BC%8C%E4%BD%86%E4%B8%AD%E9%97%B4%E4%BA%BA%E4%B8%80%E6%A0%B7%E5%8F%AF%E4%BB%A5%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%BB%BA%E7%AB%8BHTTPS%E8%BF%9E%E6%8E%A5%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%B0%86%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E8%BD%AC%E5%8F%91%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%BC%9A%E8%AF%9D%E5%8A%AB%E6%8C%81%E3%80%82",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://xxx.xxx.com来访问网站，或者有些网站并非全网HTTPS，而是只在需要进行敏感数据传输时才使用HTTPS的漏洞。中间人攻击者在劫持了客户端与服务端的HTTP会话后，将HTTP页面里面所有的https://超链接都换成http://，用户在点击相应的链接时，是使用HTTP协议来进行访问；这样，就算服务器对相应的URL只支持HTTPS链接，但中间人一样可以和服务建立HTTPS连接之后，将数据使用HTTP协议转发给客户端，实现会话劫持。"),a("OutboundLink")],1),a("br"),t._v("这种攻击手段更让人难以提防，因为它使用HTTP，不会让浏览器出现HTTPS证书不可信的警告，而且用户很少会去看浏览器上的URL是"),a("a",{attrs:{href:"https://xn--http-zi0i364s//%E3%80%82%E7%89%B9%E5%88%AB%E6%98%AFApp%E7%9A%84WebView%E4%B8%AD%EF%BC%8C%E5%BA%94%E7%94%A8%E4%B8%80%E8%88%AC%E4%BC%9A%E6%8A%8AURL%E9%9A%90%E8%97%8F%E6%8E%89%EF%BC%8C%E7%94%A8%E6%88%B7%E6%A0%B9%E6%9C%AC%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E6%9F%A5%E7%9C%8B%E5%88%B0URL%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8%E3%80%82",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://还是http://。特别是App的WebView中，应用一般会把URL隐藏掉，用户根本无法直接查看到URL出现异常。"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("该种攻击方式同样无法劫持App内的HTTPS连接会话，因为App中传入请求的URL参数是固定带有"),a("a",{attrs:{href:"https://%E7%9A%84%EF%BC%9B%E4%BD%86%E5%9C%A8webview%E4%B8%AD%E6%89%93%E5%BC%80%E7%BD%91%E9%A1%B5%E5%90%8C%E6%A0%B7%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%EF%BC%8C%E5%9C%A8%E9%9D%9E%E5%85%A8%E7%BD%91https%E7%9A%84%E7%BD%91%E7%AB%99%EF%BC%8C%E5%BB%BA%E8%AE%AE%E5%AF%B9webview%E4%B8%AD%E6%89%93%E5%BC%80%E7%9A%84url%E5%81%9A%E6%A3%80%E6%9F%A5%EF%BC%8C%E6%A3%80%E6%9F%A5%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8https//%E7%9A%84URL%E6%98%AF%E5%90%A6%E8%A2%AB%E7%AF%A1%E6%94%B9%E4%B8%BAhttp://%EF%BC%9B%E4%B9%9F%E5%BB%BA%E8%AE%AE%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%9C%A8%E9%85%8D%E7%BD%AEHTTPS%E6%9C%8D%E5%8A%A1%E6%97%B6%EF%BC%8C%E5%8A%A0%E4%B8%8A%E2%80%9CHTTP",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://的；但在WebView中打开网页同样需要注意，在非全网HTTPS的网站，建议对WebView中打开的URL做检查，检查应该使用https://的URL是否被篡改为http://；也建议服务端在配置HTTPS服务时，加上“HTTP"),a("OutboundLink")],1),t._v(" Strict Transport Security”配置项。"),a("br"),a("strong",[t._v("防范HTTPS中间人攻击")])]),t._v(" "),a("ul",[a("li",[t._v("不要随意连入公共场合内的WiFi，或者使用未知代理服务器")]),t._v(" "),a("li",[t._v("不要安装不可信或突然出现的描述文件，信任伪造的证书；（如某12306，在正规渠道下载系统以及浏览器）")]),t._v(" "),a("li",[t._v("App内部需对服务器证书进行单独的对比校验，确认证书不是伪造的；\n"),a("ul",[a("li",[t._v("查看证书是否过期")]),t._v(" "),a("li",[t._v("服务器证书上的域名是否和服务器的实际域名相匹配")]),t._v(" "),a("li",[t._v("校验证书链")]),t._v(" "),a("li",[t._v("打包证书校验")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"yswKR"}})]),t._v(" "),a("h3",{attrs:{id:"劫持https的请求的思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#劫持https的请求的思路","aria-hidden":"true"}},[t._v("#")]),t._v(" 劫持https的请求的思路")]),t._v(" "),a("p",[t._v("模拟中间人攻击，以百度为例"),a("br"),t._v("先用OpenSSL查看下证书，直接调用openssl库识别目标服务器支持的SSL/TLS cipher suite")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("openssl s_client "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("connect www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("用sslcan识别ssl配置错误，过期协议，过时cipher suite和hash算法")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("sslscan "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("tlsall www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("分析证书详细数据")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("sslscan "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("show"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("certificate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("no"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ciphersuites www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("生成一个证书")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("openssl req "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("x509 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("days "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1096")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("key ca"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("out ca"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("crt\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("开启路由功能")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("sysctl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("w net"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ipv4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ip_forward"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("写转发规则，将80、443端口进行转发给8080和8443端口")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("iptables "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("t nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PREROUTING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p tcp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("dport "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REDIRECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ports "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n   iptables "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("t nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PREROUTING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p tcp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("dport "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REDIRECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ports "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8443")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("最后使用arpspoof进行arp欺骗")]),t._v(" "),a("p",[a("a",{attrs:{name:"FwOtE"}})]),t._v(" "),a("h3",{attrs:{id:"http2的多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2的多路复用","aria-hidden":"true"}},[t._v("#")]),t._v(" http2的多路复用")]),t._v(" "),a("p",[t._v("HTTP2采用二进制格式传输，取代了HTTP1.x的文本格式，二进制格式解析更高效。"),a("br"),t._v("多路复用代替了HTTP1.x的序列和阻塞机制，所有的相同域名请求都通过同一个TCP连接并发完成。在HTTP1.x中，并发多个请求需要多个TCP连接，浏览器为了控制资源会有6-8个TCP连接都限制。"),a("br"),t._v("HTTP2中"),a("br"),t._v("同域名下所有通信都在单个连接上完成，消除了因多个 TCP 连接而带来的延时和内存消耗。"),a("br"),t._v("单个连接上可以并行交错的请求和响应，之间互不干扰"),a("br"),t._v("**影响 JavaScript 应用程序打包"),a("br"),t._v("**我们目前把多个文件打包的做法让浏览器很难高效地缓存代码：在一个模块里改动一行代码也需要重新下载整个打包后的文件。随着HTTP/2的多路复用让请求变得不那么昂贵，我们可以选择把代码分割到小模块里，以更好地利用缓存，确保我们的应用高效地利用用户的带宽。"),a("br"),t._v("。随着JavaScript社区正在朝更小的、更专一的模块方向发展，给客户端提供未打包的文件也不太理想。除此之外，把文件合并在一起可以更好地压缩，节省带宽。")]),t._v(" "),a("p",[a("a",{attrs:{name:"kkCSe"}})]),t._v(" "),a("h3",{attrs:{id:"websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket","aria-hidden":"true"}},[t._v("#")]),t._v(" Websocket")]),t._v(" "),a("p",[t._v("Websocket 是一个 持久化的协议， 基于 http ， 服务端可以 主动 push"),a("br"),t._v("兼容：")]),t._v(" "),a("ul",[a("li",[t._v("FLASH Socket")]),t._v(" "),a("li",[t._v("长轮询： 定时发送 ajax")]),t._v(" "),a("li",[t._v("long poll： 发送 --\x3e 有消息时再 response")])]),t._v(" "),a("p",[t._v("用法：")]),t._v(" "),a("ul",[a("li",[t._v("new WebSocket(url)")]),t._v(" "),a("li",[t._v("ws.onerror = fn")]),t._v(" "),a("li",[t._v("ws.onclose = fn")]),t._v(" "),a("li",[t._v("ws.onopen = fn")]),t._v(" "),a("li",[t._v("ws.onmessage = fn")]),t._v(" "),a("li",[t._v("ws.send()")])]),t._v(" "),a("p",[a("a",{attrs:{name:"K19nf"}})]),t._v(" "),a("h3",{attrs:{id:"cookie-隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-隔离","aria-hidden":"true"}},[t._v("#")]),t._v(" Cookie 隔离")]),t._v(" "),a("p",[t._v("如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，"),a("br"),t._v("所以不如隔离开。"),a("br"),t._v("因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，"),a("br"),t._v("这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。"),a("br"),t._v("同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，"),a("br"),t._v("提高了webserver的http请求的解析速度。")])])}),[],!1,null,null,null);r.default=s.exports}}]);